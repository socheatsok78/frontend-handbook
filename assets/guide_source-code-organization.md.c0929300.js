import{_ as e,c as o,o as t,a}from"./app.d04e7e1e.js";const u='{"title":"Source Code Organization","description":"","frontmatter":{},"headers":[{"level":2,"title":"Git","slug":"git"},{"level":2,"title":"Commits","slug":"commits"}],"relativePath":"guide/source-code-organization.md","lastUpdated":1654837765000}',n={name:"guide/source-code-organization.md"},s=a(`<h1 id="source-code-organization" tabindex="-1">Source Code Organization <a class="header-anchor" href="#source-code-organization" aria-hidden="true">#</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This document is currently in a &quot;Work in Progress&quot; stage.</p></div><h2 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-hidden="true">#</a></h2><p>We prefer a rebase workflow and occasional feature branches. Most work happens directly on the <code>main</code> branch. For that reason, we recommend setting the <code>pull.rebase</code> setting to <code>merges</code>.</p><div class="language-sh"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">git config --global pull.rebase merges</span></span>
<span class="line"></span></code></pre></div><h2 id="commits" tabindex="-1">Commits <a class="header-anchor" href="#commits" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This specification is inspired by and supersedes the <a href="https://www.conventionalcommits.org/" target="_blank" rel="noopener noreferrer">Conventional Commits</a> specification.</p></div><p>We have very precise rules over how our Git commit messages must be formatted. This format leads to easier to read commit history.</p><p>The commit message should be structured as follows:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">&lt;type&gt;[optional scope]: &lt;description&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">[optional body]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">[optional footer(s)]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>The commit contains the following structural elements, to communicate intent to the consumers of your library:</p><ol><li><strong>fix</strong>: a commit of the type <code>fix</code> patches a bug in your codebase (this correlates with <code>PATCH</code> in Semantic Versioning).</li><li><strong>feat</strong>: a commit of the type <code>feat</code> introduces a new feature to the codebase (this correlates with <code>MINOR</code> in Semantic Versioning).</li><li><strong>BREAKING CHANGE</strong>: a commit that has a footer <code>BREAKING CHANGE:</code>, or appends a <code>!</code> after the type/scope, introduces a breaking API change (correlating with <code>MAJOR</code> in Semantic Versioning). A <code>BREAKING CHANGE</code> can be part of commits of any type.</li><li>types other than <code>fix:</code> and <code>feat:</code> are allowed, for example <a href="https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional" target="_blank" rel="noopener noreferrer">@commitlint/config-conventional</a> (based on the the <a href="https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines" target="_blank" rel="noopener noreferrer">Angular convention</a>) recommends <code>build:</code>, <code>chore:</code>, <code>ci:</code>, <code>docs:</code>, <code>style:</code>, <code>refactor:</code>, <code>perf:</code>, <code>test:</code>, and others.</li><li>footers other than <code>BREAKING CHANGE: &lt;description&gt;</code> may be provided and follow a convention similar to <a href="https://git-scm.com/docs/git-interpret-trailers" target="_blank" rel="noopener noreferrer">git trailer format</a>.</li></ol><p>Additional types are not mandated by the Conventional Commits specification, and have no implicit effect in Semantic Versioning (unless they include a BREAKING CHANGE). A scope may be provided to a commit\u2019s type, to provide additional contextual information and is contained within parenthesis, e.g., <code>feat(parser): add ability to parse arrays</code>.</p>`,13),i=[s];function c(r,l,d,p,m,h){return t(),o("div",null,i)}var f=e(n,[["render",c]]);export{u as __pageData,f as default};
