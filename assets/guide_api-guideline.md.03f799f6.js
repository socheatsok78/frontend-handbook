import{_ as e,c as a,o as t,a as i}from"./app.5d2f7bc5.js";const m='{"title":"API Guidelines","description":"","frontmatter":{},"headers":[{"level":2,"title":"Namespaces","slug":"namespaces"},{"level":2,"title":"JavaScript","slug":"javascript"},{"level":2,"title":"Global Events","slug":"global-events"},{"level":2,"title":"Private Events","slug":"private-events"},{"level":2,"title":"Event naming","slug":"event-naming"},{"level":2,"title":"JSDOC","slug":"jsdoc"}],"relativePath":"guide/api-guideline.md","lastUpdated":1654837099000}',s={name:"guide/api-guideline.md"},n=i('<h1 id="api-guidelines" tabindex="-1">API Guidelines <a class="header-anchor" href="#api-guidelines" aria-hidden="true">#</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This document is currently in a &quot;Work in Progress&quot; stage.</p></div><h2 id="namespaces" tabindex="-1">Namespaces <a class="header-anchor" href="#namespaces" aria-hidden="true">#</a></h2><p>Coming soon...</p><h2 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-hidden="true">#</a></h2><p>The API should have a JavaScript\u2019ish feel. While that is harder to put in rules, it means we use namespaces, properties, functions, and globals instead of object-factories and services. Also take inspiration from popular existing JS API, for instance <code>window.createStatusBarItem</code> is like <code>document.createElement</code>, the members of <code>DiagnosticsCollection</code> are similar to ES6 maps etc.</p><h2 id="global-events" tabindex="-1">Global Events <a class="header-anchor" href="#global-events" aria-hidden="true">#</a></h2><p>Coming soon...</p><h2 id="private-events" tabindex="-1">Private Events <a class="header-anchor" href="#private-events" aria-hidden="true">#</a></h2><p>Coming soon...</p><h2 id="event-naming" tabindex="-1">Event naming <a class="header-anchor" href="#event-naming" aria-hidden="true">#</a></h2><p>Events follow the <code>on[Did|Will]VerbSubject</code> patterns, like <code>onDidLoginUser</code> or <code>onWillLoginUser</code>. It doesn\u2019t hurt to use explicit names.</p><h2 id="jsdoc" tabindex="-1">JSDOC <a class="header-anchor" href="#jsdoc" aria-hidden="true">#</a></h2><p>We add JSDoc for all parts of the API. The doc is supported by markdown syntax. When document string-datatypes that end up in the UI, use the phrase \u2018Human-readable string\u2026\u2019</p>',14),o=[n];function r(d,l,c,h,p,u){return t(),a("div",null,o)}var g=e(s,[["render",r]]);export{m as __pageData,g as default};
